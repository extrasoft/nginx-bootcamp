events {}

http {

    # include ให้แสดง content-type ให้ถูกต้อง
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
    include mime.types;


    # วิธีที่ 2 ทำ revesre proxy โดยใช้วิธีแบ่งโดย servername
    # เป็นวิธีที่นิยมทำมากสุด

    server {
        listen 80;
        server_name localhost;

        location / {
            return 200 $server_addr;#"This is a reverse proxy";
        }
    }

    server {
        listen 80;
        server_name api.localhost;

        location / {
            # เพิ่มค่า Header ไปยัง proxy ปลายทาง

            # proxy_buffers จะทำหน้าที่ในการรับ response จาก server ปลายทาง 
            # ค่าแรกจะเป็น จำนวน worker 
            # ค่าที่สองจะเป็นขนาด
            proxy_buffers 16 4k;

            # proxy_buffer_size จะทำหน้าที่ในการรับ response จาก server ปลายทาง (เฉพาะส่วนของ Header)
            # ส่วนใหญ่แล้วจะตั้งค่าไว้ครึ่งนึงของ proxy_buffers
            proxy_buffer_size 2k;

            # proxy_buffering กรณีไม่อยากใช้งาน Buffers เลย (ต้องการรับ response แล้วส่งไปให้ client ทันทีไม่มีการพักข้อมูล)
            # ถ้า off แล้วส่งผลให้เครื่องที่เป็น revesrse proxy จะใช้ทรัพยากรเยอะกว่าเก่าเพราะไม่มีการพักข้อมูล
            proxy_buffering off;


            # proxy_bind จะเป็นการกำหนด IP ที่จะส่งไปหา server ปลายทาง
            # proxy_bind 127.0.0.1;
            # proxy_bind $server_addr; ## จะหมายถึง IP ของเครื่อง revesre proxy
            # proxy_bind $server_addr transparent; ## จะหมายถึง IP ของเครื่อง Client จริงๆ
            proxy_bind $server_addr;
            
            proxy_pass http://host.docker.internal:3000/; 
        }
    }
}