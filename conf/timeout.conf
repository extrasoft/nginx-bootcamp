# ทำ worker_processes ว่าจะใช้กี่ process ในการทำงาน
# วิธีดูว่ามีกี่ core ให้ใช้ command ดังนี้ docker exec -it my-nginx bash
# พิมพ์ nproc
# หรือ คลิกขวาที่ Docker (ตรง Taskbar) => Setting => Resource ดูว่ามีกี่ cpu
worker_processes 2; 

events {
    # ทำ worker_connections
    # วิธีดูว่ามีกี่ core ให้ใช้ command ดังนี้ docker exec -it my-nginx bash
    # พิมพ์ ulimit -a
    # ดูว่ามีกี่ open files โดยที่ connections จะต้องไม่เกินนี้
    worker_connections 512;
}

http {

    # access_log off; #ปิด access_log (ไม่ต้องเก็บ log)
    # เปลี่ยน path ของไฟล์ log
    access_log /var/log/nginx/access.log 


    # ตั้งค่า Buffers สำหรับเก็บข้อมูลพักชั่วคราวฝั่งรับจาก client
    # client_body_buffer_size ไว้สำหรับกำหนดขนาดขั้นต่ำที่ user กรอกข้อมูลผ่าน form
    # client_max_body_size ไว้สำหรับกำหนดขนาดสูงสุดที่ user กรอกมา (รวมการแนบไฟล์รูป หรือไฟล์ pdf ด้วย)
    # client_header_buffer_size ไว้สำหรับกำหนด header ที่ user ส่งมาว่าจะเป็นขนาดเท่าไหร่
    # มีหน่วยเป็น k, K, m, M, g, G
    client_body_buffer_size 40k; # default จะเป็น 8k (สำหรับ 32 บิท) หรือ 16k (สำหรับ 64 บิท)
    client_max_body_size 10m; # default เป็น 1m
    client_header_buffer_size 1k; # default เป็น 1k


    # ตั้งค่า (max) timeouts หน่วยเป็น วินาที (s)

    # client reequest
    # client_body_timeout ตั้งเวลาสูงสุดที่จะรับ body จาก client
    # client_header_timeout ตั้งเวลาสูงสุดที่จะรับ header จาก client
    client_body_timeout 60s; # ถ้าข้อมูลที่ส่งมามีเยอะก็ปรับเพิ่มหรือลดได้
    client_header_timeout 60s;

    # connection
    # keepalive_timeout ตั้งเวลาที่จะเก็บ connection ไว้ (รวมเวลา request+response) 
    # keepalive_requests ตั้งว่าจะรับเข้ามาได้แค่กี่ request
    keepalive_timeout 75s;
    keepalive_requests 100;

    # server response
    # send_timeout ตั้งเวลาสูงสุดที่ client จะ accept/receive ตัว response จาก server
    send_timeout 60s; # ถ้าข้อมูลที่ server ส่งไปนานเกินไปก็เพิ่มหรือลดได้



    server {
        listen 80;
        server_name localhost;

        # กำหนด root path 
        # default จะไปเปิดไฟล์ index.html
        root /usr/share/nginx/html/;

        # กำหนด autoindex
        location /images/ {
            # autoindeex คือการเปิด index path ให้สามารถมองเห็นได้บน browser
            # ค่า default = off 
            autoindex on; 
        }

        # กำหนด index
        location / {

            # การกำหนด index จะค้นหาทีละไฟล์ ตามลำดับที่เรากำหนดไว้
            index index.html index.htm index.php;


            # การกำหนด try_files จะคล้ายกับการกำหนด index
            # แต่จะมีข้อแตกต่างตัวสุดท้ายจะเป็นการ rewrite ในกรณีที่ไม่เจอไฟล์
            try_files $uri $uri/ @error404; # =404, /error404
            # จะเป็นการค้นหา $uri ก่อน
            # ถ้าไม่เจอจะค้นหา $uri/ 
            # ถ้าไม่เจอจะ rewrite ไปที่ error404
            # =404 จะไปเรียกไฟล์ 404 not found ของ nginx แทน
        }


        # กำหนด location เป็นชื่อแทนใช้ @.... (จากเดิม /error404)
        location @error404 {
            return 404 "File Not Found";
        }

    }
}